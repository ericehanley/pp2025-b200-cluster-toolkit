# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

blueprint_name: pp-custom-slurm-image

vars:
  deployment_name: # supply deployment name
  project_id: # supply project ID
  region: # supply region
  zone: # supply zone
  # Image settings
  base_image:
    project: ubuntu-os-accelerator-images
    image: ubuntu-accelerator-2204-amd64-with-nvidia-570-v20250722
  image_build_machine_type: n2-standard-32
  build_slurm_from_git_ref: 6.10.0
  # Cluster Settings
  instance_image:
    project: $(vars.project_id)
    family: $(vars.deployment_name)-u22
  disk_size_gb: 100
  base_network_name: $(vars.deployment_name)

deployment_groups:
- group: image-env
  modules:
  - id: slurm-image-network
    source: modules/network/vpc
    settings:
      network_name: $(vars.base_network_name)-net

  - id: slurm-build-script
    source: modules/scripts/startup-script
    settings:
      install_ansible: true
      docker:
        enabled: true
        world_writable: true
      runners:
      - type: data
        destination: /etc/apt/preferences.d/block-broken-nvidia-container
        content: |
          Package: nvidia-container-toolkit nvidia-container-toolkit-base libnvidia-container-tools libnvidia-container1
          Pin: version 1.17.7-1
          Pin-Priority: 100

      # The following holds NVIDIA software that was already installed on the
      # accelerator base image to be the same driver version. This reduces the
      # risk of a driver version mismatch.
      # Additional packages are held by:
      # https://github.com/GoogleCloudPlatform/slurm-gcp/blob/master/ansible/group_vars/os_ubuntu.yml
      - type: ansible-local
        destination: hold-nvidia-packages.yml
        content: |
          ---
          - name: Hold nvidia packages
            hosts: all
            become: true
            vars:
              nvidia_packages_to_hold:
              - libnvidia-cfg1-*-server
              - libnvidia-compute-*-server
              - libnvidia-nscq-*
              - nvidia-compute-utils-*-server
              - nvidia-fabricmanager-*
              - nvidia-utils-*-server
            tasks:
            - name: Hold nvidia packages
              ansible.builtin.command:
                argv:
                - apt-mark
                - hold
                - "{{ item }}"
              loop: "{{ nvidia_packages_to_hold }}"

      - type: data
        destination: /var/tmp/slurm_vars.json
        content: |
          {
            "reboot": false,
            "install_cuda": false,
            "install_gcsfuse": true,
            "install_lustre": false,
            "install_managed_lustre": false,
            "install_nvidia_repo": true,
            "install_ompi": true,
            "allow_kernel_upgrades": false,
            "monitoring_agent": "cloud-ops",
          }
          
      - type: ansible-local
        destination: install_python.yml
        content: |
          ---
          - name: Install Python 3.11 and Git
            hosts: all
            become: true
            tasks:
            - name: Update apt cache
              ansible.builtin.apt:
                update_cache: true
            - name: Install prerequisites for adding repositories
              ansible.builtin.apt:
                name: software-properties-common
                state: present
            - name: Add deadsnakes PPA for modern Python versions
              ansible.builtin.apt_repository:
                repo: ppa:deadsnakes/ppa
                state: present
            - name: Install Python 3.11, pip, and Git
              ansible.builtin.apt:
                name:
                - python3.11
                - python3.11-venv
                - python3-pip
                - git
                state: present

      - type: data
        destination: /tmp/requirements.txt
        content: |
          numpy>=2.0.2
          gymnasium==0.29.1 # -- loosen
          lightning>=2.5.0.post0
          torchvision>=0.21.0
          deepspeed>=0.14.5
          peft>=0.15.2
          transformers[torch]>=4.49.0
          tensorflow>=2.18.0 # Confirm TF version
          tensorflow-text>=2.18.1 # Adjusted to match TF version
          keras-nlp>=0.19.3
          tf-keras>=2.18.0 # Adjusted to match TF version
          ray>=2.43.0
          cut-cross-entropy

          torch>=2.7.0 # wheel file? torch-2.7.0+cu126-cp311-cp311-manylinux_2_28_x86_64.whl
          tensordict==0.8.3 # wheel file? tensordict-0.7.2-cp311-cp311-manylinux1_x86_64.whl
          torchrl==0.8.1 
          torchtune==0.6.0
          torch-tb-profiler>=0.4.3
          torchao>=0.9.0
          compressed-tensors>=0.9.3

          hydra-core>=1.3.2
          pretty-midi>=0.2.10
          tensorboard>=2.18.0 # Adjusted to match TF version
          ipykernel>=6.29.5
          hatchling>=1.27.0
          editables>=0.5
          psutil>=5.9.0
          tenacity>=9.1.2
          pydantic>=2.11.3
          pydantic-core>=2.33.1
          huggingface-hub>=0.30.0
          lm-format-enforcer>=0.10.11
          mistral-common>=1.5.4
          numba>=0.61.2
          setuptools>=78.1.0
          cmake>=3.25.0,<=3.26.3
          # appworld>=0.1.3 -- dependency conflict
          coverage>=7.6.12
          httptools>=0.6.4
          xgrammar>=0.1.18
          singleton-decorator>=1.0.0
          regex>=2024.11.6

          git+https://github.com/apple/ml-cross-entropy.git
      - type: shell
        destination: install_python_packages.sh
        content: |
          #!/bin/bash
          set -e -o pipefail
          echo "--- Upgrading pip for Python 3.11 ---"
          python3.11 -m pip install --upgrade pip
          echo "--- Installing packages from requirements.txt ---"
          python3.11 -m pip install --no-cache-dir -r /tmp/requirements.txt
          echo "--- Python package installation complete ---"

      - type: shell
        destination: install_slurm.sh
        content: |
          #!/bin/bash
          set -e -o pipefail
          ansible-pull \
              -U https://github.com/GoogleCloudPlatform/slurm-gcp -C $(vars.build_slurm_from_git_ref) \
              -i localhost, --limit localhost --connection=local \
              -e @/var/tmp/slurm_vars.json \
              ansible/playbook.yml
      # this duplicates the ulimits configuration of the HPC VM Image
      - type: data
        destination: /etc/security/limits.d/99-unlimited.conf
        content: |
          * - memlock unlimited
          * - nproc unlimited
          * - stack unlimited
          * - nofile 1048576
          * - cpu unlimited
          * - rtprio unlimited

      - type: ansible-local
        destination: install_cuda_dcgm.yml
        content: |
          ---
          - name: Install CUDA & DCGM
            hosts: all
            become: true
            vars:
              distribution: "{{ ansible_distribution | lower }}{{ ansible_distribution_version | replace('.','') }}"
              cuda_repo_url: https://developer.download.nvidia.com/compute/cuda/repos/{{ distribution }}/x86_64/cuda-keyring_1.1-1_all.deb
              cuda_repo_filename: /tmp/{{ cuda_repo_url | basename }}
              enable_nvidia_dcgm: false
              nvidia_packages:
              - cuda-toolkit-12-8
              - datacenter-gpu-manager-4-cuda12
            tasks:
            - name: Download NVIDIA repository package
              ansible.builtin.get_url:
                url: "{{ cuda_repo_url }}"
                dest: "{{ cuda_repo_filename }}"
            - name: Install NVIDIA repository package
              ansible.builtin.apt:
                deb: "{{ cuda_repo_filename }}"
                state: present
            - name: Reduce NVIDIA repository priority
              ansible.builtin.copy:
                dest: /etc/apt/preferences.d/cuda-repository-pin-600
                mode: 0o0644
                owner: root
                group: root
                content: |
                  Package: nsight-compute
                  Pin: origin *ubuntu.com*
                  Pin-Priority: -1

                  Package: nsight-systems
                  Pin: origin *ubuntu.com*
                  Pin-Priority: -1

                  Package: *
                  Pin: release l=NVIDIA CUDA
                  Pin-Priority: 400
            - name: Install CUDA & DCGM
              ansible.builtin.apt:
                name: "{{ item }}"
                update_cache: true
              loop: "{{ nvidia_packages }}"
            - name: Create nvidia-persistenced override directory
              ansible.builtin.file:
                path: /etc/systemd/system/nvidia-persistenced.service.d
                state: directory
                owner: root
                group: root
                mode: 0o755
            - name: Configure nvidia-persistenced override
              ansible.builtin.copy:
                dest: /etc/systemd/system/nvidia-persistenced.service.d/persistence_mode.conf
                owner: root
                group: root
                mode: 0o644
                content: |
                  [Service]
                  ExecStart=
                  ExecStart=/usr/bin/nvidia-persistenced --user nvidia-persistenced --verbose
              notify: Reload SystemD
            handlers:
            - name: Reload SystemD
              ansible.builtin.systemd:
                daemon_reload: true
            post_tasks:
            - name: Disable NVIDIA DCGM by default (enable during boot on GPU nodes)
              ansible.builtin.service:
                name: nvidia-dcgm.service
                state: stopped
                enabled: false
            - name: Disable nvidia-persistenced SystemD unit (enable during boot on GPU nodes)
              ansible.builtin.service:
                name: nvidia-persistenced.service
                state: stopped
                enabled: false

      - type: ansible-local
        destination: install_ibverbs_utils.yml
        content: |
          ---
          - name: Install ibverbs-utils
            hosts: all
            become: true
            tasks:
            - name: Install Linux Modules Extra
              ansible.builtin.package:
                name:
                - ibverbs-utils
                state: present
      - type: data
        destination: /etc/enroot/enroot.conf
        content: |
          ENROOT_CONFIG_PATH     ${HOME}/.enroot


- group: image
  modules:
  - id: slurm-a4high-image
    source: modules/packer/custom-image
    kind: packer
    settings:
      disk_size: $(vars.disk_size_gb)
      machine_type: $(vars.image_build_machine_type)
      source_image: $(vars.base_image.image)
      source_image_project_id: [$(vars.base_image.project)]
      image_family: $(vars.instance_image.family)
      omit_external_ip: false
      # Unattended upgrades are disabled in this blueprint so that software does not
      # get updated daily and lead to potential instability in the cluster environment.
      #
      # Unattended Upgrades installs available security updates from the Ubuntu
      # security pocket for installed packages daily by default. Administrators who
      # disable this feature assume all responsibility for manually reviewing and
      # patching their systems against vulnerabilities.
      #
      # To enable unattended upgrades, please remove this section.
      metadata:
        user-data: |
          #cloud-config
          write_files:
          - path: /etc/apt/apt.conf.d/20auto-upgrades
            permissions: '0644'
            owner: root
            content: |
              APT::Periodic::Update-Package-Lists "0";
              APT::Periodic::Unattended-Upgrade "0";
    use:
    - slurm-image-network
    - slurm-build-script